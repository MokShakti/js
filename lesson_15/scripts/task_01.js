"use strict"

//–£–º–æ–≤–∞: –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç ¬´–¢–∏—Ä¬ª. –£ –º–∞—Å–∏–≤—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è 1, —è–∫—â–æ —É —Ü—å–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç—ñ —î –∑–∞—î—Ü—å —ñ 0 –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É. –ü–æ–ª—è(–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ): –ú–∞—Å–∏–≤, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø–æ–ª–µ –∑ –∑–∞–π—Ü—è–º–∏. –ú–µ—Ç–æ–¥–∏ (–¥—ñ—ó): –ú–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É (–∑–∞–¥–∞—î—Ç—å—Å—è –ø–æ–∑–∏—Ü—ñ—è –ø–æ—Å—Ç—Ä—ñ–ª—É). –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.

if (confirm(`Shall we start the test?`)) {
   class ShootingRange {
      constructor(size = 5, maxShots = 5) {
         this.size = size;
         this.maxShots = maxShots;
         this.shotsLeft = maxShots;
         this.field = this.createField();
      }

      createField() {
         return Array.from({ length: this.size }, () =>
            Array.from({ length: this.size }, () => (Math.random() < 0.3 ? 1 : 0))
         );
      }

      shoot(x, y) {
         if (this.field[x]?.[y] === 0) {
            alert("‚ùå Invalid coordinates! Enter numbers between 1 and " + (this.size - 1));
            return false;
         }

         this.shotsLeft--;
         if (this.field[x][y] === 0) {
            alert("üéØ Hit! You shot a rabbit!");
            this.field[x][y] = 0;
         } else {
            alert("üí® Miss! No rabbit here.");
         }

         return true;
      }

      isWin() {
         return this.field.flat().every(cell => cell === 0);
      }
   }

   const game = new ShootingRange(5, 5);

   function play() {
      if (game.isWin()) return alert("üéâ You win! All rabbits are gone!");
      if (game.shotsLeft === 0) return alert("‚ùå Game over! No shots left.");

      let x = prompt(`Enter X (0-${game.size - 1}):`);
      let y = prompt(`Enter Y (0-${game.size - 1}):`);

      if (game.shoot(+x, +y)) play();
   }

   play();
}