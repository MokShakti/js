'use strict'

//–£–º–æ–≤–∞: –î–∞–Ω–æ –¥–≤–∞ –∫–ª–∞—Å–∏ MultChecker (–∫–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –º–Ω–æ–∂–µ–Ω–Ω—è - —Ä–∞–Ω–¥–æ–º–Ω–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è —á–∏—Å–ª–∞, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç–∏), AddChecker (–∫–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è - —Ä–∞–Ω–¥–æ–º–Ω–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è —á–∏—Å–ª–∞ —É –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ, —è–∫—ñ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞–≤–∞—Ç–∏). –û–±–∏–¥–≤–∞ –∫–ª–∞—Å–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—É –∫–ª–∞—Å—É Hystory, —è–∫–∏–π –∑–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É –º–∞—Å–∏–≤—ñ —É –≤–∏–≥–ª—è–¥—ñ –æ–±'—î–∫—Ç—ñ–≤  –ü—Ä–∏–∫–ª–∞–¥:
// testsList = [
// { firstNum: 1, secondNum: 5, opration:‚Äô*‚Äô, userAnswer: 7, correctAnswer: 5},
// { firstNum: 3, secondNum: 4, opration:‚Äô+‚Äô, userAnswer: 7, correctAnswer: 7},]–ú–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π –∫–ª–∞—Å TestData, —è–∫–∏–π –æ–ø–∏—Å—É—î –æ–¥–∏–Ω —Ç–∞–∫–∏–π —Ç–µ—Å—Ç —ñ —É —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ü—ñ –ø–æ–ª—è.
// –†–æ–∑—Ä–æ–±–∏—Ç–∏ –∫–ª–∞—Å TestManager, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü—ñ –∫–ª–∞—Å–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î —è–∫—ñ—Å—å N –∑–∞–¥–∞—á(—Ä–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ, —â–æ –æ–ø–∏—Ç—É–≤–∞—Ç–∏: –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∏ –º–Ω–æ–∂–µ–Ω–Ω—è) —ñ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—é—Ç—å—Å—è –≤ –æ–±‚Äô—î–∫—Ç History.–ó—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫, —â–æ–± –æ–±'—î–∫—Ç —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—É –º–æ–∂–Ω–∞ –±—É–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω. –ö–æ–ª–∏ –∑—Ä–æ–±–ª–µ–Ω–æ —Ü—ñ N –∑–∞–¥–∞—á –≤–∏–≤–µ—Å—Ç–∏ —É—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ –µ–∫—Ä–∞–Ω.


if (confirm("Shall we start the test?")) {
   class TestData {
      constructor(firstNum, secondNum, operation, userAnswer, correctAnswer) {
         this.firstNum = firstNum
         this.secondNum = secondNum
         this.operation = operation
         this.userAnswer = userAnswer
         this.correctAnswer = correctAnswer
      }
   }

   class History {
      constructor() {
         this.testsList = []
      }

      add(testData) {
         this.testsList.push(testData)
      }

      showAll() {
         document.write("<h2>üìú Test History:</h2>")
         this.testsList.forEach((t, index) => {
            const isCorrect = t.userAnswer === t.correctAnswer ? "‚úÖ" : "‚ùå"
            document.write(
               `<p>${index + 1}) ${t.firstNum} ${t.operation} ${t.secondNum} = ${t.userAnswer} (${isCorrect}, correct: ${t.correctAnswer})</p>`
            )
         })
      }
   }

   class MultChecker {
      static check(history) {
         const a = Math.floor(Math.random() * 10) + 1
         const b = Math.floor(Math.random() * 10) + 1
         const userAnswer = parseInt(prompt(`‚ùì What is ${a} * ${b}?`), 10)
         const correct = a * b
         history.add(new TestData(a, b, '*', userAnswer, correct))
      }
   }

   class AddChecker {
      static check(history) {
         const a = Math.floor(Math.random() * 50)
         const b = Math.floor(Math.random() * 50)
         const userAnswer = parseInt(prompt(`‚ùì What is ${a} + ${b}?`), 10)
         const correct = a + b
         history.add(new TestData(a, b, '+', userAnswer, correct))
      }
   }

   class TestManager {
      constructor(N) {
         if (TestManager.instance) {
            return TestManager.instance
         }

         this.N = N
         this.history = new History()
         this.counter = 0

         TestManager.instance = this
      }

      start() {
         const interval = setInterval(() => {
            if (this.counter >= this.N) {
               clearInterval(interval)
               this.history.showAll()
               return
            }

            const type = Math.random() < 0.5 ? "add" : "mult"
            if (type === "add") {
               AddChecker.check(this.history)
            } else {
               MultChecker.check(this.history)
            }

            this.counter++
         }, 1500)
      }
   }

   const manager = new TestManager(5)
   manager.start()
}